---
title: "Bayesian Staggered DID"
format: html
editor: visual
---

```{r}
# Load the necessary libraries
#install.packages("brms")
library("brms")
library("tidyverse") # For data manipulation
```

```{r}
# Set seed
set.seed(12345)

effect_scale <- 0.5

# Data generating process with 6 time periods after adoption and 1000 observations
dgp <- reset.sim(
                time.periods <- 6,
                n = 1000,
                ipw = TRUE,
                reg = TRUE
                )
dgp$te <- 0

# Add dynamic effects
dgp$te.e <- 1:time.periods * effect_scale

# Drop observations where the implementation of the EBP was on period 1. According to Callaway & Sant'Anna, these observations do not help in estimating the ATT(g, t). 
data1 <- build_sim_dataset(dgp)

data1$long <- 0

# Generate the indicator for adoption across time. If the observation adopts the EBP, they will be coded as 1 at the time of adoption and 1 for all periods after. 
data1$long[data1$period < data1$G] = 0
data1$long[data1$period >= data1$G] = 1

# How many observations remained after dropping the observations that had adopted the EBP at time period = 1
nrow(data1)
```

Analysis with standard TWFE Regression // including "bad controls" problem

```{r}
# Create a character version of event time first
data_brms_revised <- data1 %>%
  mutate(
    event_time_char = case_when(
      G == 0 ~ "NeverTreated",
      TRUE   ~ as.character(period - G) # Keep others as numeric strings
    ),
    # Now create a factor, and ensure the reference level is still "-1"
    event_time_fct = factor(event_time_char) %>% relevel(ref = "-1")
  )

# This creates a factor where "NeverTreated" is a specific level.
# The model will now estimate a coefficient for it, which we can simply ignore
# as it's not a treatment effect. But its data will correctly inform the time effects.
```

```{r}
# 1. Priors: We add a prior for the standard deviation of the random effects.
# A student_t(3, 0, 2.5) is a good weakly informative prior.
# It's like a normal distribution but with fatter tails.
# We also keep the prior on the fixed effects ("b").
priors_revised <- c(
  prior(student_t(3, 0, 2.5), class = "sd"),
  prior(normal(0, 2.5), class = "b")
)

# 2. Control settings: We set adapt_delta to a higher value.
control_settings <- list(adapt_delta = 0.95)

# 3. Re-run the model with the revised data and new settings
brm_fit_revised <- brm(
  formula = Y ~ event_time_fct + X + (1|id) + (1|period),
  data = data_brms_revised, # Use the new data with the "NeverTreated" level
  prior = priors_revised,
  control = control_settings, # Add the control settings
  family = gaussian(),
  cores = 4,
  seed = 12345,
  file = "brms_did_model_revised"
)

```

```{r}
# Summary of the model
summary(brm_fit_revised)

# Plotting code is identical
event_coeffs_full <- fixef(brm_fit_revised) %>%
  as.data.frame() %>%
  rownames_to_column("term") %>%
  filter(grepl("event_time_fct", term)) %>%
  mutate(event_time = as.numeric(gsub("event_time_fct", "", term)))

```

```{r}
# Add the reference period (effect is 0)
event_coeffs_full <- bind_rows(
  event_coeffs_full,
  data.frame(term = "event_time_fct-1", Estimate = 0, Est.Error = 0, Q2.5 = 0, Q97.5 = 0, event_time = -1)
) %>% arrange(event_time)

# Plot the results
ggplot(event_coeffs_full, aes(x = event_time, y = Estimate)) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = `Q2.5`, ymax = `Q97.5`), width = 0.2) +
  scale_x_continuous(breaks = scales::pretty_breaks()) +
  labs(
    title = "Bayesian Dynamic Treatment Effects",
    subtitle = "Model Estimated Using Full Sample (Including Never-Treated)",
    x = "Time Relative to Treatment",
    y = "Treatment Effect (delta_e)"
  ) +
  theme_minimal()
```

Now the more complex version with fully integrated model based on Sun & Abraham (2020)

```{r}
# We use the 'data1' dataframe as our starting point
data_cs <- data1 %>%
  mutate(
    # 1. Create the cohort variable as a factor
    # We group G=0 (NeverTreated) into its own category.
    cohort = case_when(
      G == 0 ~ "NeverTreated",
      G > 0  ~ paste0("Cohort_", G)
    ) %>% factor(),

    # 2. Create the event time variable (numeric, with NA for controls)
    event_time = if_else(G == 0, NA_real_, as.double(period - G))
  )

# For the interaction, it's easier to create the factor from the numeric variable
# This ensures that all cohorts share the same event time levels (e.g., -2, -1, 0, 1...)
data_cs$event_time_fct <- factor(data_cs$event_time)
data_cs$event_time_fct <- relevel(data_cs$event_time_fct, ref = "-1")

# We also need to set a reference cohort. Let's pick the first treated cohort.
# Replace `Cohort_2` with whatever your first cohort is if it's different.
data_cs$cohort <- relevel(data_cs$cohort, ref = "Cohort_2")
```

```{r}
# Create the time factor needed for the formula
data_cs$time_fct <- factor(data_cs$period)

# Priors and control settings from before are still a good idea
priors_revised <- c(
  prior(student_t(3, 0, 2.5), class = "sd"),
  prior(normal(0, 2.5), class = "b")
)
control_settings <- list(adapt_delta = 0.95)

# Fit the fully interacted model
brm_fit_cs <- brm(
  formula = Y ~ time_fct + (1|id) + X + cohort * event_time_fct, # Changed to '*'
  data = data_cs,
  prior = priors_revised,
  control = control_settings,
  family = gaussian(),
  cores = 4,
  seed = 12345,
  file = "brms_did_cs_v2" # Use a new file
)
```

```{r}
# We will no longer use tidybayes for this part, but dplyr and stringr from the tidyverse.
library(dplyr)
library(tidyr)
library(stringr)

# --- The Corrected Workflow ---

# 1. Extract all posterior draws into a data frame
post <- posterior::as_draws_df(brm_fit_cs)

# 2. Isolate the "main effect" draws (the effect for the reference cohort)
main_effects_draws <- post %>%
  select(.draw, starts_with("b_event_time_fct")) %>%
  pivot_longer(
    cols = -".draw",
    names_to = "event_time_fct",
    values_to = "main_effect",
    # This cleanly strips the prefix from the coefficient name
    names_prefix = "b_event_time_fct"
  )

# 3. Isolate the "interaction effect" draws
interaction_draws <- post %>%
  # Select all cohort-related terms
  select(.draw, starts_with("b_cohort")) %>%
  # Exclude the cohort main effects (which don't have a ':'), keeping only interactions
  select(-matches("^b_cohortCohort_[0-9]+$")) %>%
  pivot_longer(
    cols = -".draw",
    names_to = "term",
    values_to = "interaction_effect"
  ) %>%
  # Parse the cohort and event time from the complex term name
  mutate(
    cohort = str_extract(term, "Cohort_[0-9]+"),
    event_time_fct = str_extract(term, "-?[0-9]+$")
  ) %>%
  # We only need the identifying columns and the value
  select(.draw, cohort, event_time_fct, interaction_effect)


# 4. Create a complete grid of all draws, cohorts, and post-treatment event times
# This ensures we calculate an effect for every cohort at every time point
n_draws <- nrow(post)
all_treated_cohorts <- unique(data_cs$cohort[data_cs$G > 0])
post_treatment_times <- as.character(unique(data_cs$event_time[data_cs$event_time >= 0]))

grid <- expand_grid(
  .draw = 1:n_draws,
  cohort = all_treated_cohorts,
  event_time_fct = post_treatment_times
)

# 5. Join the main and interaction effects onto the grid and calculate the total effect
total_effects_draws <- grid %>%
  # Join the main effect (which is the same for all cohorts at a given time/draw)
  left_join(main_effects_draws, by = c(".draw", "event_time_fct")) %>%
  # Join the interaction effect (which is specific to each cohort)
  left_join(interaction_draws, by = c(".draw", "cohort", "event_time_fct")) %>%
  # For the reference cohort, the interaction_effect will be NA, so we replace it with 0
  replace_na(list(interaction_effect = 0)) %>%
  # The total effect = main effect (for ref cohort) + interaction effect (the difference for other cohorts)
  mutate(total_effect = main_effect + interaction_effect)

# Corrected Step 6: Summarize the total effects to get our final dynamic estimates

dynamic_effects_correct <- total_effects_draws %>%
  mutate(event_time = as.numeric(event_time_fct)) %>%
  # It's good practice to explicitly filter out any rows that don't correspond to a valid event time
  filter(!is.na(event_time)) %>%
  group_by(event_time) %>%
  summarise(
    # Add na.rm = TRUE to all summary functions to safely handle any missing values
    Estimate = mean(total_effect, na.rm = TRUE),
    Q2.5 = quantile(total_effect, 0.025, na.rm = TRUE),
    Q97.5 = quantile(total_effect, 0.975, na.rm = TRUE),
    .groups = "drop"
  )

# Step 7: Add the reference period (t=-1) and plot (this part remains the same)
dynamic_effects_correct <- bind_rows(
  dynamic_effects_correct,
  tibble(event_time = -1, Estimate = 0, Q2.5 = 0, Q97.5 = 0)
) %>% arrange(event_time)

ggplot(dynamic_effects_correct, aes(x = event_time, y = Estimate)) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
  geom_point(size = 3, color = "blue") +
  geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2, color = "blue") +
  labs(
    title = "Bayesian Dynamic Effects (Corrected)",
    subtitle = "Effects correctly reconstructed before averaging across cohorts",
    x = "Time Relative to Treatment",
    y = "Average Treatment Effect on the Treated"
  ) +
  theme_minimal()
```
